% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eoo.R
\name{eooMin}
\alias{eooMin}
\title{BETA Minimum (near) Extent of Occurrence (EOO) from points with errors radius}
\usage{
eooMin(thepoints, errorfield = "R", defaultRadius = 2000, returnV = "S")
}
\arguments{
\item{thepoints}{dataframe of points in metres i.e. c(x,y,error or x,y)}

\item{errorfield}{field with the error radius if null, default error will be used}

\item{defaultRadius}{if no error field a default error will be applied to all points (default = 2000)}

\item{returnV}{switch to return different sets of results: \cr
S = Simple, returns just the minimum area in km2, (DEFAULT) \cr
EX = returns list for two areas -  near minimum and near maximum area for reference \cr
SF = returns a polygon simple feature for mapping, plotting in ggplot/plot or to export to a GIS format \cr 
SFA = returns a list of simple features with both the near minimum polygon and near maximum as a simple feature for mapping, plotting in ggplot or export to GIS systems}
}
\value{
float_value area in km2 EOO polygon or sf polygon
}
\description{
Calculates the Extent of Occurrence in meters or returns a spatial polygon from a set of points (x,y)
Note this algorithm is in beta and will not always return the smallest area, this is true of very long and skinny sets of points. 
But will give a very quick approximation which in most situations  will suffice.
EOO's are constructed from the centroid and rays to each of the points on the convex hull and where these rays intercept the error circle
}
\note{
BETA: it will go wrong with errors which overlap (i.e. small EOO)
Not quite min or max in most cases, but should be close.
Probably worth looking at when EOO is near thresholds.
}
\examples{
#construct an oval of point for testing
thepoints <- ptsOval(19,0.5,deg2rad(45),0.5)
names(thepoints) <- c("lat","long")
#project the points
thepoints <- simProjWiz(thepoints)
#check crs
attr(thepoints,'crs')
#add some random errors between 0-5000m
thepoints$R <- runif(nrow(thepoints),0,5000)
#buffer them so you can view
ps <- st_as_sf(thepoints,coords=c('X','Y'))
psbuff <- st_buffer(ps,ps$R)
#normal EOO
eooPoly <- eoo(thepoints,"SF")
#set projection of bufferpoints
st_crs(psbuff) <- st_crs(eooPoly)
eooplot <- ggplot(data=eooPoly) + geom_sf(color="black",fill="green") + geom_sf(data=psbuff) 
eooplot
#normal eoo area
normaleookm <- eoo(thepoints)
#minimum eoo area
mineoo <- eooMin(thepoints,'R',,'S')
#percentage different
(normaleookm-mineoo)/normaleookm
# Get at sf object for plotting
mineoopoly <- eooMin(thepoints,'R',,"SF")
#add it to the gplot
eooplot <- eooplot + geom_sf(data=mineoopoly,fill=NA,col='red')
eooplot
#get the max as well
eooboth <- eooMin(thepoints,'R',,"SFA")
#add to plot
eooplot <- eooplot + geom_sf(data=eooboth$max,fill=NA,col='blue')
eooplot
###################
#with a content error radius
#construct an oval of point for testing
thepoints <- ptsOval(19,0.5,deg2rad(45),0.5)
names(thepoints) <- c("lat","long")
#project the points
thepoints <- simProjWiz(thepoints)
#
eooMin(thepoints,,2000,'S')
plot(eooMin(thepoints,,2000,'SF'))
}
\references{
Bachman, S., Moat, J., Hill, A.W., de Torre, J., Scott, B., 2011. Supporting Red List threat assessments with GeoCAT: geospatial conservation assessment tool. Zookeys 126, 117–26. doi:10.3897/zookeys.150.2109 

Joppa, L.N., Butchart, S.H.M., Hoffmann, M., Bachman, S.P., Akçakaya, H.R., Moat, J.F., Böhm, M., Holland, R.A., Newton, A., Polidoro, B., Hughes, A., 2016. Impact of alternative metrics on estimates of extent of occurrence for extinction risk assessment. Conserv. Biol. 30, 362–370. doi:10.1111/cobi.12591
}
\seealso{
\code{\link{ratingEoo}} for EOO Ratings
}
\author{
Justin Moat. J.Moat@kew.org

Amelie Moat
}
